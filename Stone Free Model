# Economic Model for Kidney Stone Patient Follow-up with Updated Costs
library(gt)
library(tidyverse)
library(DiagrammeR)

# Population and Incidence Data
# English population is 54,370,300 (ONS estimate 2024)
KSD_patients_total_n_2014 <- 54370300 * 0.01
KSD_patients_total_n_2014 <- as_tibble(KSD_patients_total_n_2014)
colnames(KSD_patients_total_n_2014) <- "N"

# Parameters
total_patients <- KSD_patients_total_n_2014$N * 0.5  # Base cohort - presume that half of all patients with incident stones are stone free
follow_up_years <- 5

# Simulate population distribution of ages & genders
age <- rnorm(n = total_patients, mean = 40, sd = 10) # Presuming that mean age of first stone is 40 + normally distributed
hist(age)

gender <- sample(c("Male", "Female"), size = total_patients, replace = TRUE, prob = c(0.5, 0.5)) # assume 1:1 male:female ratio

population <- data.frame(
  ID = 1:total_patients,
  Gender = gender,
  Age = age
) %>% as_tibble()

# Death rates - as per ONS per 1000 population in UK in 2021 by gender

death_rates <- cbind(
  Age_range = c(
    "<1",
    "1-4",
    "5-9",
    "10-14",
    "15-19",
    "20-24",
    "25-29",
    "30-34",
    "35-39",
    "40-44",
    "45-49",
    "50-54",
    "55-59",
    "60-64",
    "65-69",
    "70-74",
    "75-79",
    "80-84",
    "85-90",
    ">90"
  ),
  Male_death_rate = c(
    4.3,
    0.1,
    0.1,
    0.1,
    0.3,
    0.5,
    0.6,
    0.9,
    1.3,
    2,
    3.1,
    4.5,
    6.6,
    10.3,
    15.7,
    24,
    40.1,
    70.7,
    121.9,
    231.6
  ),
  Female_death_rate = c(
    3.4,
    0.1,
    0.1,
    0.1,
    0.2,
    0.2,
    0.3,
    0.5,
    0.8,
    1.2,
    1.9,
    2.8,
    4.2,
    6.5,
    10.1,
    16,
    27.5,
    51.2,
    94.9,
    209.9
  )
) %>% as_tibble() 

death_rates$Male_death_rate <- as.numeric(death_rates$Male_death_rate)
death_rates$Female_death_rate <- as.numeric(death_rates$Female_death_rate)
death_rates <- death_rates %>% mutate(Male_death_rate = Male_death_rate / 10,
                             # divide by 10 to get death rate per 100
                             Female_death_rate = Female_death_rate / 10)


# Risk Status Parameters
risk_status_proportion_low <- 0.5
risk_status_proportion_high <- 0.5

# Recurrence Rates - presumed 50% over 5 years
recurrence_rate_low <- 0.2 # 20% recurrence for low-risk patients
recurrence_rate_high <- 0.6  # 60% recurrence for high-risk patients

# Costs derived from NHS tariff 2022-23
# Clinic costs
initial_consultation_cost <- 145  # First appointment
clinic_review_cost <- 71  # Follow-up appointment
imaging_cost <- 40  # Added imaging cost

# Intervention Costs 
eswl_cost <- 445 * 2  # assume 2 ESWL treatments (LB36Z)
urs_cost <- 2386  # median cost for URS (LB65D)
pcnl_cost <- 4548  # cost for CC 0-2 (LB75B)

# Calculate patients in each risk category
total_patients_low_risk <- total_patients * risk_status_proportion_low
total_patients_high_risk <- total_patients * risk_status_proportion_high

# Recurrence Calculations
patients_with_recurrence_low <- total_patients_low_risk * recurrence_rate_low
patients_with_recurrence_high <- total_patients_high_risk * recurrence_rate_high

# Combine total recurrence
patients_with_recurrence <- patients_with_recurrence_low + patients_with_recurrence_high

# Symptomatic vs Asymptomatic Breakdown
asymptomatic_patients_low <- patients_with_recurrence_low * 0.7
symptomatic_patients_low <- patients_with_recurrence_low * 0.3

asymptomatic_patients_high <- patients_with_recurrence_high * 0.7
symptomatic_patients_high <- patients_with_recurrence_high * 0.3

# Combine symptomatic and asymptomatic patients
asymptomatic_patients <- asymptomatic_patients_low + asymptomatic_patients_high
symptomatic_patients <- symptomatic_patients_low + symptomatic_patients_high

# Intervention Types Distribution
eswl_proportion <- 0.5
urs_proportion <- 0.3
pcnl_proportion <- 0.2

# Calculate Intervention Patients
intervention_patients <- symptomatic_patients
eswl_patients <- intervention_patients * eswl_proportion
urs_patients <- intervention_patients * urs_proportion
pcnl_patients <- intervention_patients * pcnl_proportion

# Intervention Outcomes
eswl_stone_free <- eswl_patients * 0.5
eswl_residual_stones <- eswl_patients * 0.5

# Residual Stone Outcomes
eswl_residual_asymptomatic <- eswl_residual_stones * 0.5
eswl_residual_symptomatic <- eswl_residual_stones * 0.5

urs_stone_free <- urs_patients * 0.8
urs_residual_stones <- urs_patients * 0.2
urs_residual_asymptomatic <- urs_residual_stones * 0.5
urs_residual_symptomatic <- urs_residual_stones * 0.5

pcnl_stone_free <- pcnl_patients * 0.95
pcnl_residual_stones <- pcnl_patients * 0.05
pcnl_residual_asymptomatic <- pcnl_residual_stones * 0.5
pcnl_residual_symptomatic <- pcnl_residual_stones * 0.5


# Total Cost Calculation Function
calculate_total_cost <- function(total_patients) {
  # Initial Costs
  initial_costs <- total_patients * (initial_consultation_cost + 2 * (clinic_review_cost + imaging_cost))
  
  # Follow-up Costs for Years 3-5
  annual_follow_up_costs <- total_patients * 3 * (clinic_review_cost + imaging_cost)
  
  # Intervention Costs
  intervention_costs <- (
    eswl_patients * eswl_cost +
      urs_patients * urs_cost +
      pcnl_patients * pcnl_cost
  )
  
  # Additional Intervention for Residual Stones
  residual_stone_intervention_patients <- total_patients * 0.1
  
  eswl_reintervention_patients <- residual_stone_intervention_patients * eswl_proportion
  urs_reintervention_patients <- residual_stone_intervention_patients * urs_proportion
  pcnl_reintervention_patients <- residual_stone_intervention_patients * pcnl_proportion
  
  residual_stone_intervention_costs <- (
    eswl_reintervention_patients * eswl_cost +
      urs_reintervention_patients * urs_cost +
      pcnl_reintervention_patients * pcnl_cost
  )
  
  # Total Costs
  total_cost <- initial_costs + annual_follow_up_costs + intervention_costs + residual_stone_intervention_costs
  return(total_cost)
}


# Calculate Total Cost
total_model_cost <- calculate_total_cost(total_patients)

# Build function to get death rate over 5 years
assign_5yr_death_rate <- function(age, gender) {
  survival_probability <- 1 # Start with 100% survival probability
  
  for (year in 1:5) {
    # Determine the age range for the current year
    age_band <- case_when(
      age < 1 ~ "<1",
      age >= 1 & age <= 4 ~ "1-4",
      age >= 5 & age <= 9 ~ "5-9",
      age >= 10 & age <= 14 ~ "10-14",
      age >= 15 & age <= 19 ~ "15-19",
      age >= 20 & age <= 24 ~ "20-24",
      age >= 25 & age <= 29 ~ "25-29",
      age >= 30 & age <= 34 ~ "30-34",
      age >= 35 & age <= 39 ~ "35-39",
      age >= 40 & age <= 44 ~ "40-44",
      age >= 45 & age <= 49 ~ "45-49",
      age >= 50 & age <= 54 ~ "50-54",
      age >= 55 & age <= 59 ~ "55-59",
      age >= 60 & age <= 64 ~ "60-64",
      age >= 65 & age <= 69 ~ "65-69",
      age >= 70 & age <= 74 ~ "70-74",
      age >= 75 & age <= 79 ~ "75-79",
      age >= 80 & age <= 84 ~ "80-84",
      age >= 85 & age <= 90 ~ "85-90",
      age > 90 ~ ">90"
    )
    
    # Get the annual death rate for the current age band and gender
    annual_death_rate <- ifelse(
      gender == "Male",
      death_rates %>% filter(Age_range == age_band) %>% pull(Male_death_rate),
      death_rates %>% filter(Age_range == age_band) %>% pull(Female_death_rate)
    )
    
    # Update survival probability for this year
    survival_probability <- survival_probability * (1 - annual_death_rate)
    
    # Increment age for the next year
    age <- age + 1
  }
  
  # Convert survival probability to cumulative 5-year death rate
  death_rate_5yr <- 1 - survival_probability
  
  return(death_rate_5yr)
}


# Assign Death Rates to Simulated Population
population$mortality_rate <- mapply(assign_5yr_death_rate, population$Age, population$Gender)

# Simulate Population
simulate_population <- function(population) {
  # Remove deceased individuals based on 5-year mortality rates
  survival <- runif(nrow(population)) > population$mortality_rate
  population <- population[survival, ]
  
  # Age the population by 5 years
  population$Age <- population$Age + 5
  
  return(population)
}


# Adjust Population and Recalculate Costs
adjusted_population <- simulate_population(population)

# Total patients after simulation
total_patients <- nrow(adjusted_population)

# Reuse the cost calculation function from earlier
adjusted_total_cost <- calculate_total_cost(total_patients)

# Output the result
cat("Total Cost After Simulation: ", adjusted_total_cost, "\n")

# Visualise the Model
grViz("
digraph MarkovModel {
  graph [layout = dot, rankdir = LR]
  
  # Nodes for model states
  StoneFree [shape = oval, label = 'Stone Free']
  LowRisk [shape = rectangle, label = 'Low Risk (50%)']
  HighRisk [shape = rectangle, label = 'High Risk (50%)']
  LowRecurrence [shape = rectangle, label = 'Low Recurrence (20%)']
  HighRecurrence [shape = rectangle, label = 'High Recurrence (60%)']
  NoRecurrence [shape = rectangle, label = 'No Recurrence']
  Symptomatic [shape = rectangle, label = 'Symptomatic']
  Asymptomatic [shape = rectangle, label = 'Asymptomatic']
  ESWL [shape = rectangle, label = 'ESWL Intervention (50%)']
  URS [shape = rectangle, label = 'URS Intervention (30%)']
  PCNL [shape = rectangle, label = 'PCNL Intervention (20%)']
  FollowUp [shape = oval, label = '5 Years Follow-up']
  Death [shape = hexagon, label = 'Death', rank = same]

  # Transitions and probabilities
  StoneFree -> LowRisk [label = '50%']
  StoneFree -> HighRisk [label = '50%']
  LowRisk -> LowRecurrence [label = '20% Recurrence']
  HighRisk -> HighRecurrence [label = '60% Recurrence']
  LowRisk -> NoRecurrence [label = '80% No Recurrence']
  HighRisk -> NoRecurrence [label = '40% No Recurrence']
  LowRecurrence -> Symptomatic [label = '30% Symptomatic']
  LowRecurrence -> Asymptomatic [label = '70% Asymptomatic']
  HighRecurrence -> Symptomatic [label = '30% Symptomatic']
  HighRecurrence -> Asymptomatic [label = '70% Asymptomatic']
  Symptomatic -> ESWL [label = '50% ESWL']
  Symptomatic -> URS [label = '30% URS']
  Symptomatic -> PCNL [label = '20% PCNL']
  ESWL -> FollowUp [label = '50% Stone Free']
  URS -> FollowUp [label = '80% Stone Free']
  PCNL -> FollowUp [label = '95% Stone Free']
  ESWL -> Symptomatic [label = '50% Residual']
  URS -> Symptomatic [label = '20% Residual']
  PCNL -> Symptomatic [label = '5% Residual']
  Asymptomatic -> FollowUp [label = 'Continue Follow-Up']
  NoRecurrence -> FollowUp [label = 'Continue Follow-Up']

  # Death state transitions (excluding StoneFree and FollowUp)
  LowRisk -> Death [label = 'Death Rate']
  HighRisk -> Death [label = 'Death Rate']
  LowRecurrence -> Death [label = 'Death Rate']
  HighRecurrence -> Death [label = 'Death Rate']
  Symptomatic -> Death [label = 'Death Rate']
  ESWL -> Death [label = 'Death Rate']
  URS -> Death [label = 'Death Rate']
  PCNL -> Death [label = 'Death Rate']
  Asymptomatic -> Death [label = 'Death Rate']
  NoRecurrence -> Death [label = 'Death Rate']
}
")


# Per Patient Cost Calculation
per_patient_cost <- total_model_cost / total_patients

# Create a data frame with the cost breakdown
cost_breakdown <- data.frame(
  Cost_Category = c(
    "Initial Consultation and First-Year Costs",
    "Annual Follow-up Costs (Years 3-5)",
    "Initial Intervention Costs",
    "Residual Stone Intervention Costs",
    "Total 5-Year Follow-up Cost",
    "Mean Cost per Patient"
  ),
  Cost = c(
    round(total_patients * (initial_consultation_cost + 2 * (clinic_review_cost + imaging_cost)), 2),
    round(total_patients * 3 * (clinic_review_cost + imaging_cost), 2),
    round((eswl_patients * eswl_cost + urs_patients * urs_cost + pcnl_patients * pcnl_cost), 2),
    round((eswl_residual_symptomatic + urs_residual_symptomatic + pcnl_residual_symptomatic) * eswl_cost, 2),
    round(total_model_cost, 2),
    round(per_patient_cost, 2)
  )
)

# Create GT table for cost breakdown
gt_table <- cost_breakdown %>%
  gt() %>%
  tab_header(
    title = "Economic Model: Stone Free Patients Follow-up Costs",
    subtitle = "5-Year Cost Analysis for Estimated Stone Free Patients from 2014 Population of England"
  ) %>%
  fmt_currency(
    columns = Cost,
    currency = "GBP"
  ) %>%
  cols_label(
    Cost_Category = "Cost Category",
    Cost = "Amount (£)"
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(columns = Cost_Category, rows = 5:6)
  ) %>%
  opt_stylize(style = 1) %>% tab_style(
    style = cell_borders(sides = "all", color = "black", weight = px(2)),
    locations = cells_body()
  )

# Create Risk Status Breakdown
risk_breakdown <- data.frame(
  Risk_Status = c("Low Risk", "High Risk", "Total"),
  Patients = c(
    total_patients_low_risk, 
    total_patients_high_risk, 
    total_patients
  ),
  Recurrence_Rate = c(
    recurrence_rate_low * 100, 
    recurrence_rate_high * 100, 
    "(Weighted)"
  ),
  Recurrence_Patients = c(
    patients_with_recurrence_low, 
    patients_with_recurrence_high, 
    patients_with_recurrence
  ),
  Cost_per_Patient = c(
    round(per_patient_cost * risk_status_proportion_low, 2),
    round(per_patient_cost * risk_status_proportion_high, 2),
    round(per_patient_cost, 2)
  )
) 

# Create GT table for risk status breakdown
risk_status_gt_table <- risk_breakdown %>%
  gt() %>%
  tab_header(
    title = "Risk Status Impact on Stone Recurrence",
    subtitle = "Comparison of Low and High-Risk Patient Groups"
  ) %>%
  fmt_percent(
    columns = Recurrence_Rate,
    scale_values = FALSE
  ) %>%
  fmt_currency(
    columns = Cost_per_Patient,
    currency = "GBP"
  ) %>%
  cols_label(
    Risk_Status = "Risk Status",
    Patients = "Number of Patients",
    Recurrence_Rate = "Recurrence Rate (%)",
    Recurrence_Patients = "Patients with Recurrence",
    Cost_per_Patient = "Cost per Patient (£)"
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_body(columns = Risk_Status, rows = 3)
  ) %>%
  opt_stylize(style = 1) %>% tab_style(
    style = cell_borders(sides = "all", color = "black", weight = px(2)),
    locations = cells_body()
  )

# Print both tables
print("Cost Breakdown:")
gt_table

print("Risk Status Breakdown:")
risk_status_gt_table
