# Economic Model for Kidney Stone Patient Follow-up with Costs - Stone Free Patients ####
library(gt)
library(tidyverse)
library(DiagrammeR)
library(data.table)
library(janitor)
library(DataExplorer)

## 1. Define Inputs ####
### 1.1 5 Years F/U as per EAU guidance ####
follow_up_years <- 5

### 1.2 Define Recurrence metrics ####
# Risk Status Parameters
risk_status_proportion_low <- 0.5 # as per data from UKB / AoU
risk_status_proportion_high <- 0.5

# Recurrence Rates
recurrence_rate_low <- 0.2 # 20% recurrence for low-risk patients over 5 years
annual_recurrence_rate_low <- 0.2 / 5
recurrence_rate_high <- 0.6  # 60% recurrence for high-risk patients over 5 years
annual_recurrence_rate_high <- 0.6 / 5

### 1.3 Population and Incidence Data ####
ons_population_estimates <- fread("~/Desktop/Sayer/Economics/population_estimates_ons.csv") %>% as_tibble() %>% janitor::clean_names()
ons_population_estimates <- ons_population_estimates %>% subset(laname23 == "ENGLAND") %>% subset(select = -c(ladcode23, laname23, country))
ons_population_estimates <- ons_population_estimates %>%
  mutate(across(
    .cols = matches("^population_\\d{4}$"),
    .fns = ~ as.numeric(gsub(",", "", .))
  ))

total_population <- ons_population_estimates %>% mutate(
  total_pop_2011 = sum(population_2011),
  total_pop_2012 = sum(population_2012),
  total_pop_2013 = sum(population_2013),
  total_pop_2014 = sum(population_2014),
  total_pop_2015 = sum(population_2015),
  total_pop_2016 = sum(population_2016),
  total_pop_2017 = sum(population_2017),
  total_pop_2018 = sum(population_2018),
  total_pop_2019 = sum(population_2019),
  total_pop_2020 = sum(population_2020),
  total_pop_2021 = sum(population_2021),
  total_pop_2022 = sum(population_2022)
) %>% slice_head(n = 1) %>% subset(
  select = c(
    total_pop_2011,
    total_pop_2012,
    total_pop_2013,
    total_pop_2014,
    total_pop_2015,
    total_pop_2016,
    total_pop_2017,
    total_pop_2018,
    total_pop_2019,
    total_pop_2020,
    total_pop_2021,
    total_pop_2022
  )
)

total_population <- total_population %>%
  mutate(row_id = row_number()) %>%
  pivot_longer(-row_id, names_to = "column", values_to = "value") %>% separate(column, into = c("total", "pop", "year")) %>% subset(select = c(year, value)) %>% rbind(c(2023, 68265200))

ons_english_population_estimates <- fread("~/Desktop/Sayer/Economics/england_pop_mid_year_estimates_ons.csv") %>% as_tibble() %>% janitor::clean_names()
ons_english_population_estimates <- ons_english_population_estimates[-1:-7, ]
colnames(ons_english_population_estimates) <- c("year", "england_mye_population_estimate")
ons_english_population_estimates$england_mye_population_estimate <- as.numeric(ons_english_population_estimates$england_mye_population_estimate)
ons_english_population_estimates$year <- as.integer(ons_english_population_estimates$year)

KSD_patients_total_n <- ons_english_population_estimates %>% subset(year > 2010) %>% mutate(
  total_patients = england_mye_population_estimate * 0.01) # Use lower estimate of 1% incidence)
  
  ### 1.4 Numbers undergoing intervention as per HES data from AD ####
  ## Read in Data
  hes_data_elective <- fread(
    "~/Desktop/Sayer/Economics/intervention_hes_data_elective.csv"
  ) %>% as_tibble() %>% janitor::clean_names() %>% subset(select = c(finy, urs, pcnl, eswl))
  hes_data_elective_emergency <- fread(
    "~/Desktop/Sayer/Economics/intervention_hes_data_elective_and_emergency.csv"
  ) %>% as_tibble() %>% janitor::clean_names() %>% subset(select = c(finy, urs, pcnl, eswl)) %>% slice_head(n =
                                                                                                              13)
  
  
  hes_data_elective_emergency <- hes_data_elective_emergency %>% separate(finy, into =
                                                                            c("year", "extra")) %>% subset(select = -extra) %>% mutate(total_treatment_n = urs + pcnl + eswl, .keep = "all")
  
  hes_data_elective_emergency$year <- as.integer(hes_data_elective_emergency$year)
  
  hes_data_elective_emergency <- hes_data_elective_emergency %>% left_join(KSD_patients_total_n, by = c("year" = "year")) %>% select(
    year,
    england_mye_population_estimate,
    total_patients,
    everything()
  )
  
  
  # Intervention Types Distribution
  hes_data_elective_emergency <- hes_data_elective_emergency %>% mutate(
    eswl_proportion = eswl / total_treatment_n,
    urs_proportion = urs / total_treatment_n,
    pcnl_proportion = pcnl / total_treatment_n,
    .keep = "all"
  )
  
  # Intervention Outcomes
  hes_data_elective_emergency <- hes_data_elective_emergency %>% mutate(
    eswl_stone_free = eswl * 0.5,
    eswl_residual_stones = eswl * 0.5,
    .keep = "all"
  )
  
  # Residual Stone Outcomes
  hes_data_elective_emergency <- hes_data_elective_emergency %>% mutate(
    eswl_residual_asymptomatic = eswl_residual_stones * 0.5,
    eswl_residual_symptomatic = eswl_residual_stones * 0.5,
    urs_stone_free = urs_patients * 0.6,
    urs_residual_stones = urs_patients * 0.4,
    urs_residual_asymptomatic = urs_residual_stones * 0.5,
    urs_residual_symptomatic = urs_residual_stones * 0.5,
    pcnl_stone_free = pcnl_patients * 0.74,
    pcnl_residual_stones = pcnl_patients * 0.26,
    pcnl_residual_asymptomatic = pcnl_residual_stones * 0.5,
    pcnl_residual_symptomatic = pcnl_residual_stones * 0.5,
    .keep = "all"
  )
  
  
  # Spontaneous passage numbers - assume 50% of those with spontaneous passage are SF after
  hes_data_elective_emergency <- hes_data_elective_emergency %>% mutate(
    spontaneous_passage_n = total_patients - total_treatment_n,
    spontaneous_passage_stone_free = spontaneous_passage_n * 0.74,
    total_sf_patients = spontaneous_passage_stone_free + pcnl_stone_free + urs_stone_free + eswl_stone_free,
    .keep = "all"
  )
  
  # Calculate patients in each risk category
  hes_data_elective_emergency <- hes_data_elective_emergency %>% mutate(
    total_patients_low_risk = total_patients * risk_status_proportion_low,
    total_patients_high_risk = total_patients * risk_status_proportion_high,
    .keep = "all"
  )
  
  # Recurrence Calculations
  hes_data_elective_emergency <- hes_data_elective_emergency %>% mutate(
    patients_with_recurrence_low = total_patients_low_risk * recurrence_rate_low,
    patients_with_recurrence_high = total_patients_high_risk * recurrence_rate_high,
    .keep = "all"
  )
  
  # Combine total recurrence
  hes_data_elective_emergency <- hes_data_elective_emergency %>% mutate(
    patients_with_recurrence = patients_with_recurrence_low + patients_with_recurrence_high,
    .keep = "all"
  )
  
  # Symptomatic vs Asymptomatic Breakdown
  hes_data_elective_emergency <- hes_data_elective_emergency %>% mutate(
    asymptomatic_patients_low = patients_with_recurrence_low * 0.7,
    symptomatic_patients_low = patients_with_recurrence_low * 0.3,
    asymptomatic_patients_high = patients_with_recurrence_high * 0.7,
    symptomatic_patients_high = patients_with_recurrence_high * 0.3,
    .keep = "all"
  )
  
  
  
  # Combine symptomatic and asymptomatic patients
  hes_data_elective_emergency <- hes_data_elective_emergency %>% mutate(
    asymptomatic_patients = asymptomatic_patients_low + asymptomatic_patients_high,
    symptomatic_patients = symptomatic_patients_low + symptomatic_patients_high,
    .keep = "all"
  )
  
  ### 1.5 Simulate population distribution of ages & genders ####
  simulate_population_distribution <- function(total_patients) {
  
  n_lr_f <- total_patients * 0.3 * 0.33
  n_lr_m <- total_patients * 0.7 * 0.37
  n_hr_f <- total_patients * 0.3 * 0.63
  n_hr_m <- total_patients * 0.7 * 0.67
    
  age_lr_f <- pmax(rnorm(n = n_lr_f, mean = 39.3, sd = 18.1), 1) # assume minimum age at presentation = 1
  age_lr_m <- pmax(rnorm(n = n_lr_m, mean = 38.1, sd = 18), 1)
  age_hr_f <- pmax(rnorm(n = n_hr_f, mean = 40.1, sd = 18.1), 1)
  age_hr_m <- pmax(rnorm(n = n_hr_m, mean = 38.8, sd = 17), 1)
  
  population <- rbind(
    cbind(sex = "female", "age" = age_lr_f, "risk_status" = "low"),
    cbind(sex = "male", "age" = age_lr_m, "risk_status" = "low"),
    cbind(sex = "female", "age" = age_hr_f, "risk_status" = "high"),
    cbind(sex = "male", "age" = age_hr_m, "risk_status" = "high")
  ) %>% as_tibble()
  
  population$sex <- as.factor(population$sex)
  population$age <- as.numeric(population$age)
  population$age <- round(population$age, digits = 0)
  population$risk_status <- as.factor(population$risk_status)
  
  return(population)
  }
  
  ### 1.6 Death rates - as per ONS by sex for all cause mortality for 2013-2023 ####
  # Currently in percentage format
  death_rates_ons <- fread("~/Desktop/Sayer/Economics/death_rates_ons.csv") %>% as_tibble() %>% janitor::clean_names()
  
  death_rates_ons <- death_rates_ons %>% cbind(
    Age_range = c(
      "<1",
      "1-4",
      "5-9",
      "10-14",
      "15-19",
      "20-24",
      "25-29",
      "30-34",
      "35-39",
      "40-44",
      "45-49",
      "50-54",
      "55-59",
      "60-64",
      "65-69",
      "70-74",
      "75-79",
      "80-84",
      "85-90",
      ">90"
    )
  ) %>% select(Age_range, sex, everything()) %>% subset(
    select = -c(
      age,
      x2013,
      x2014,
      x2015,
      x2016,
      x2017,
      x2018,
      x2019,
      x2020,
      x2021,
      x2022,
      x2023
    )
  )
  
  colnames(death_rates_ons) <- c(
    "Age_range",
    "sex",
    "thirteen",
    "fourteen",
    "fifteen",
    "sixteen",
    "seventeen",
    "eighteen",
    "nineteen",
    "twenty",
    "twentyone",
    "twentytwo",
    "twentythree"
  )
  
  death_rates_ons <- death_rates_ons %>% mutate(
    "thirteen" = thirteen / 100,
    "fourteen" = fourteen / 100,
    "fifteen" = fifteen / 100,
    "sixteen" = sixteen / 100,
    "seventeen" = seventeen / 100,
    "eighteen" = eighteen / 100,
    "nineteen" =  nineteen / 100,
    "twenty" = twenty / 100,
    "twentyone" = twentyone / 100,
    "twentytwo" = twentytwo / 100,
    "twentythree" = twentythree / 100
  )
  
  death_rates_ons <- death_rates_ons %>% subset(Age_range != "<1")
  
  death_rates_ons$Age_range <- factor(death_rates_ons$Age_range,
                     levels = c("1-4",
                                "5-9",
                                "10-14",
                                "15-19",
                                "20-24",
                                "25-29",
                                "30-34",
                                "35-39",
                                "40-44",
                                "45-49",
                                "50-54",
                                "55-59",
                                "60-64",
                                "65-69",
                                "70-74",
                                "75-79",
                                "80-84",
                                "85-90",
                                ">90"),
                     ordered = TRUE)  
  
  death_rates_ons$sex <- as.factor(death_rates_ons$sex)
  
  
  
  ### 1.7 Renal colic presentations without intervention ####
  # HES data from Jour et al. 2022 - PMID: 35306719
  # Data on those NOT undergoing intervention from Schoenfeld et al. 2019 - PMID: 31790565
  
  hes_colic_data <- cbind(
    year = c(2016, 2017, 2018, 2019, 2020),
    colic_n = c(39941, #N20.1 Calculus of ureter + N20.2 Calculus of kidney and ureter + N23.X Unspecified renal colic
                40702, #Presume that those NOT undergoing emergency procedures are managed conservatively
                40524, 41936, 41556),
    emergency_procedures_n = c(1897, 2118, 2274, 2334, 2659),
    elective_procedures_n = c(40403, 40898, 40985, 40857, 41199)
  ) %>% as_tibble() %>% mutate(
    conservative_mx_n = colic_n - emergency_procedures_n,
    conservative_mx_prop = conservative_mx_n / colic_n,
    .keep = "all"
  )
  
  hes_data_elective_emergency <- hes_data_elective_emergency %>% left_join(hes_colic_data, by = c("year" = "year"))
  
  
  ### 1.7 Costs derived from NHS National tariff 2022-23 Annex A unless otherwise specified ####
  # Clinic costs
  initial_consultation_cost <- 145  # First appointment
  clinic_review_cost <- 71  # Follow-up appointment
  imaging_cost <- 27  # Direct access plain film X-ray (as per 22-23 non mandatory guide prices)
  us_cost <- 43 # Ultrasound Scan with duration of less than 20 minutes, without Contrast (RD40Z)
  ct_cost <-  69 # Computerised Tomography Scan of One Area, without Contrast, 19 years and over (RD20A)
  urine_24_hr_cost <- 190.5
  
  # Intervention Costs
  eswl_cost <- 445 * 2  # assume 2 ESWL treatments (LB36Z)
  urs_cost <- 2386  # median cost for URS (LB65D)
  pcnl_cost <- 4548  # cost for CC 0-2 (LB75B)
  stent_cost <- 822 # intermediate endoscopic bladder procedures (LB14Z)
  
  # Acute presentation costs
  ed_presentation_cost <- 288 #  Category 3 Investigation with Category 1-3 Treatment
  
  # Costs associated with low risk disease
  year_1_lr_sf_fu_cost <- 2 * (clinic_review_cost + imaging_cost)
  year_3_5_lr_sf_fu_cost <- 1 * (clinic_review_cost + imaging_cost)
  
  # Costs associated with high risk disease
  year_1_hr_sf_fu_cost_current <- 2 * (clinic_review_cost + imaging_cost) + urine_24_hr_cost
  year_1_hr_sf_fu_cost_eau <- 2 * (clinic_review_cost + imaging_cost + urine_24_hr_cost)

  year_2_lr_sf_fu_cost_current <- 2 * (clinic_review_cost + imaging_cost + urine_24_hr_cost)
  year_2_lr_sf_fu_cost_eau <- 2 * (clinic_review_cost + imaging_cost)
  
  year_3_onwards_lr_sf_fu_cost_current <- 2 * (clinic_review_cost + imaging_cost + urine_24_hr_cost)
  year_3_onwards_lr_sf_fu_cost_eau <- 2 * (clinic_review_cost + imaging_cost + urine_24_hr_cost)
  
  
## 2. Total Cost Calculation for SF patients Functions ####
  ### 2.1 Calculate total cost function - XR / US F/U ####
  calculate_total_sf_cost_xr_fu <- function(data) {
    # Initial Costs
    data <- data %>% mutate(initial_costs = (total_sf_patients * (
      initial_consultation_cost + 2 * (clinic_review_cost + imaging_cost) + (total_sf_patients * 0.5 * urine_24_hr_cost)
    )),
    .keep = "all")
    
    # Follow-up Costs
    data <- data %>% mutate(
      lr_annual_follow_up_costs = (total_sf_patients * 0.5) * (clinic_review_cost + imaging_cost),
      #low risk patients
      hr_annual_follow_up_costs = (total_sf_patients *
                                     0.5) * (clinic_review_cost + imaging_cost + urine_24_hr_cost),
      # high risk patients
      .keep = "all"
    )
    
    # Additional Intervention for Residual Stones
    data <- data %>% mutate(
      residual_stone_intervention_patients = eswl_residual_symptomatic + urs_residual_symptomatic + pcnl_residual_symptomatic,
      eswl_reintervention_patients = residual_stone_intervention_patients * eswl_proportion,
      urs_reintervention_patients = residual_stone_intervention_patients * urs_proportion,
      pcnl_reintervention_patients = residual_stone_intervention_patients * pcnl_proportion,
      residual_stone_intervention_costs = eswl_reintervention_patients * eswl_cost +
        urs_reintervention_patients * urs_cost +
        pcnl_reintervention_patients * pcnl_cost,
      .keep = "all"
    )
    
    # Total Costs
    total_cost <- data %>% mutate(
      total_cost = initial_costs + (3 * lr_annual_follow_up_costs) + (4 * hr_annual_follow_up_costs) + residual_stone_intervention_costs
    )
    return(total_cost)
  }
  
  ### 2.2 Total Cost Calculation Function - CT F/U ####
  calculate_total_sf_cost_ct_fu <- function(data) {
    # Initial Costs
    data <- data %>% mutate(initial_costs = (total_sf_patients * (
      initial_consultation_cost + 2 * (clinic_review_cost + ct_cost) + (total_sf_patients * 0.5 * urine_24_hr_cost)
    )),
    .keep = "all")
    
    # Follow-up Costs
    data <- data %>% mutate(
      lr_annual_follow_up_costs = (total_sf_patients * 0.5) * (clinic_review_cost + ct_cost),
      #low risk patients
      hr_annual_follow_up_costs = (total_sf_patients *
                                     0.5) * (clinic_review_cost + ct_cost + urine_24_hr_cost),
      # high risk patients
      .keep = "all"
    )
    
    
    # Additional Intervention for Residual Stones
    data <- data %>% mutate(
      residual_stone_intervention_patients = eswl_residual_symptomatic + urs_residual_symptomatic + pcnl_residual_symptomatic,
      eswl_reintervention_patients = residual_stone_intervention_patients * eswl_proportion,
      urs_reintervention_patients = residual_stone_intervention_patients * urs_proportion,
      pcnl_reintervention_patients = residual_stone_intervention_patients * pcnl_proportion,
      residual_stone_intervention_costs = eswl_reintervention_patients * eswl_cost +
        urs_reintervention_patients * urs_cost +
        pcnl_reintervention_patients * pcnl_cost,
      .keep = "all"
    )
    
    # Total Costs
    total_cost <- data %>% mutate(
      total_cost = initial_costs + (3 * lr_annual_follow_up_costs) + (4 * hr_annual_follow_up_costs) + residual_stone_intervention_costs
    )
    return(total_cost)
  }
  
  ### 2.3 Total Cost Calculation Function - CT for those having had an intervention otherwise XR ####
  calculate_total_sf_cost_ct_xr_fu <- function(data) {
    # Initial Costs
    data <- data %>% mutate(initial_costs = (((elective_procedures_n + emergency_procedures_n) * (
      initial_consultation_cost + (clinic_review_cost + ct_cost) + (clinic_review_cost + imaging_cost)
    )
    ) + (
      total_sf_patients - (elective_procedures_n + emergency_procedures_n)
    ) * (initial_consultation_cost + 2 * (clinic_review_cost + ct_cost)) + (total_sf_patients * 0.5 * urine_24_hr_cost)
    ), .keep = "all")
    
    # Follow-up Costs
    data <- data %>% mutate(
      lr_annual_follow_up_costs = (total_sf_patients * 0.5) * (clinic_review_cost + ct_cost),
      #low risk patients
      hr_annual_follow_up_costs = (total_sf_patients *
                                     0.5) * (clinic_review_cost + ct_cost + urine_24_hr_cost),
      # high risk patients
      .keep = "all"
    )
    
    
    # Additional Intervention for Residual Stones
    data <- data %>% mutate(
      residual_stone_intervention_patients = eswl_residual_symptomatic + urs_residual_symptomatic + pcnl_residual_symptomatic,
      eswl_reintervention_patients = residual_stone_intervention_patients * eswl_proportion,
      urs_reintervention_patients = residual_stone_intervention_patients * urs_proportion,
      pcnl_reintervention_patients = residual_stone_intervention_patients * pcnl_proportion,
      residual_stone_intervention_costs = eswl_reintervention_patients * eswl_cost +
        urs_reintervention_patients * urs_cost +
        pcnl_reintervention_patients * pcnl_cost,
      .keep = "all"
    )
    
    # Total Costs
    total_cost <- data %>% mutate(
      total_cost = initial_costs + (3 * lr_annual_follow_up_costs) + (4 * hr_annual_follow_up_costs) + residual_stone_intervention_costs
    )
    return(total_cost)
  }
  
## 3. Population estimations ####
  ### 3.1 Death / Recurrence rate ####
  assign_death_rate_over_time <- function(data, years = 5, death_rates_ons, base_year) {
    survival_probability <- 1  # Start with 100% survival
    yearly_survivors <- tibble()  # Initialize result storage
    
    for (year in 1:years) {
      # Determine the current age band
      data1 <- data %>% mutate(
      age_band = case_when(
        age >= 1 & age <= 4 ~ "1-4",
        age >= 5 & age <= 9 ~ "5-9",
        age >= 10 & age <= 14 ~ "10-14",
        age >= 15 & age <= 19 ~ "15-19",
        age >= 20 & age <= 24 ~ "20-24",
        age >= 25 & age <= 29 ~ "25-29",
        age >= 30 & age <= 34 ~ "30-34",
        age >= 35 & age <= 39 ~ "35-39",
        age >= 40 & age <= 44 ~ "40-44",
        age >= 45 & age <= 49 ~ "45-49",
        age >= 50 & age <= 54 ~ "50-54",
        age >= 55 & age <= 59 ~ "55-59",
        age >= 60 & age <= 64 ~ "60-64",
        age >= 65 & age <= 69 ~ "65-69",
        age >= 70 & age <= 74 ~ "70-74",
        age >= 75 & age <= 79 ~ "75-79",
        age >= 80 & age <= 84 ~ "80-84",
        age >= 85 & age <= 90 ~ "85-90",
        age > 90 ~ ">90"
      ),
      .keep = "all")
      
      data1$age_band <- factor(data1$age_band, levels = c(
        "1-4", "5-9", "10-14", "15-19", "20-24",
        "25-29", "30-34", "35-39", "40-44", "45-49",
        "50-54", "55-59", "60-64", "65-69", "70-74",
        "75-79", "80-84", "85-90", ">90"
      ), ordered = TRUE)
      
      data1 <- data1 %>%
        group_by(age_band, sex, risk_status) %>%
        summarise(n = n(), .groups = "drop")
      
      male_data <- data1 %>% subset(sex == "male")
      female_data <- data1 %>% subset(sex == "female")
      
      # Filter and pull the appropriate death rate
      male_annual_death_rate <- death_rates_ons[, 1:2] %>%
        cbind("Male_death_rate" = death_rates_ons[, base_year]) %>%
        filter(sex == "Male")
      
      female_annual_death_rate <- death_rates_ons[, 1:2] %>%
        cbind("Female_death_rate" = death_rates_ons[, base_year]) %>%
        filter(sex == "Female")
      
      death_rate <- male_annual_death_rate %>%
        left_join(female_annual_death_rate, by = c("Age_range" = "Age_range")) %>%
        mutate(gender = sex.x, .keep = "all") %>%
        subset(select = -c(sex.x, sex.y))
      
      data_with_death_rates <- data1 %>%
        mutate(
          survivors = ifelse(sex == "male",
          n * (1 - death_rate$Male_death_rate),
          n * (1 - death_rate$Female_death_rate)
          )
        )
      
      data_with_death_rates <- data_with_death_rates %>% mutate(
        recurrence = (ifelse(risk_status == "low",
                      survivors * annual_recurrence_rate_low * year,
                      survivors * annual_recurrence_rate_high * year)
      ))
      
      data_with_death_rates$survivors <- as.integer(data_with_death_rates$survivors)
      
      yearly_result <- data_with_death_rates %>%
        group_by(sex, risk_status) %>%
        summarise(survivors = sum(survivors),
                  recurrence = sum(recurrence),
                  .groups = "drop") %>%
        mutate(year = 2010 + base_year,
               years_fu = years,
               recurrence_free_survivors = survivors - recurrence)
      
      yearly_survivors <- bind_rows(yearly_survivors, yearly_result)
      
      # Increment for next iteration
      set.seed(1234)
      data <- update_dataset_with_death_rates(data, data_with_death_rates)
      base_year <- base_year + 1
    }
    
    return(yearly_survivors)
  }
  
  
  # Function to update dataset based on death rates
  update_dataset_with_death_rates <- function(data, data_with_death_rates) {
    
    # First, create age_band in your main data to match the death rates tibble
    data <- data %>%
      mutate(age_band = case_when(
        age >= 1 & age <= 4 ~ "1-4",
        age >= 5 & age <= 9 ~ "5-9", 
        age >= 10 & age <= 14 ~ "10-14",
        age >= 15 & age <= 19 ~ "15-19",
        age >= 20 & age <= 24 ~ "20-24",
        age >= 25 & age <= 29 ~ "25-29",
        age >= 30 & age <= 34 ~ "30-34",
        age >= 35 & age <= 39 ~ "35-39",
        age >= 40 & age <= 44 ~ "40-44",
        age >= 45 & age <= 49 ~ "45-49",
        age >= 50 & age <= 54 ~ "50-54",
        age >= 55 & age <= 59 ~ "55-59",
        age >= 60 & age <= 64 ~ "60-64",
        age >= 65 & age <= 69 ~ "65-69",
        age >= 70 & age <= 74 ~ "70-74",
        age >= 75 & age <= 79 ~ "75-79",
        age >= 80 & age <= 84 ~ "80-84",
        age >= 85 & age <= 90 ~ "85-90",
        age > 90 ~ ">90"
      ))
    
    # Calculate survival probabilities for each group
    survival_probs <- data_with_death_rates %>%
      mutate(survival_rate = survivors / n)
    
    # Join survival rates to your main data
    data_updated <- data %>%
      left_join(survival_probs %>% select(age_band, sex, risk_status, survival_rate),
                by = c("age_band", "sex", "risk_status")) %>%
      # Generate random numbers and keep survivors
      mutate(random_draw = runif(n())) %>%
      filter(random_draw <= survival_rate) %>%
      select(-random_draw, -survival_rate, -age_band)
    
    return(data_updated)
  }

  
  ### 3.2 Simulate Population ####
  simulate_population <- function(population) {
    # Remove deceased individuals based on 5-year mortality rates
    survival <- runif(nrow(population)) > population$mortality_rate
    population <- population[survival, ]
    
    # Age the population by 1 year
    population$age <- population$age + 1
    
    return(population)
  }
  
  ## 4. Calculate Costs ####
  ### 4.1 Visualise the Model ####
  grViz(
    "
digraph MarkovModel {
  graph [layout = dot, rankdir = LR, bgcolor = 'white']

  # Nodes for model states with colors
  StoneFree [shape = oval, label = 'Stone Free',
             style = filled, fillcolor = 'lightblue', color = 'darkblue']

  LowRisk [shape = rectangle, label = 'Low Risk',
           style = filled, fillcolor = 'chartreuse3', color = 'darkgreen']

  HighRisk [shape = rectangle, label = 'High Risk',
            style = filled, fillcolor = 'orange', color = 'darkorange']

  NoRecurrence [shape = rectangle, label = 'No Recurrence',
                style = filled, fillcolor = 'chartreuse3', color = 'darkgreen']

  Recurrence [shape = diamond, label = 'Recurrence',
              style = filled, fillcolor = 'salmon', color = 'red']

  FollowUp [shape = oval, label = 'No Stone Events\\nover Follow-up',
            style = filled, fillcolor = 'lightcyan', color = 'teal']

  Death [shape = hexagon, label = 'Death', rank = same,
         style = filled, fillcolor = 'black', color = 'black', fontcolor = 'white']

  Intervention [shape = diamond, label = 'Potential\\nIntervention', rank = same,
                style = filled, fillcolor = 'gold', color = 'orange']

  # Transitions and probabilities with colored edges
  StoneFree -> LowRisk [label = '36%', color = 'green', fontcolor = 'darkgreen']
  StoneFree -> HighRisk [label = '64%', color = 'orange', fontcolor = 'darkorange']

  LowRisk -> Recurrence [label = '20% Recurrence', color = 'red', fontcolor = 'red']
  HighRisk -> Recurrence [label = '60% Recurrence', color = 'red', fontcolor = 'red']

  LowRisk -> NoRecurrence [label = '80% No Recurrence', color = 'darkgreen', fontcolor = 'darkgreen']
  HighRisk -> NoRecurrence [label = '40% No Recurrence', color = 'darkgreen', fontcolor = 'darkgreen']

  NoRecurrence -> FollowUp [label = 'Continue Follow-Up', color = 'teal', fontcolor = 'teal']
  Recurrence -> Intervention [label = 'Potential Intervention', color = 'gold', fontcolor = 'orange']

  # Death state transitions with consistent styling
  HighRisk -> Death [label = 'Mortality Rate', color = 'black', fontcolor = 'black', style = 'dashed']
  LowRisk -> Death [label = 'Mortality Rate', color = 'black', fontcolor = 'black', style = 'dashed']
  Recurrence -> Death [label = 'Mortality Rate', color = 'black', fontcolor = 'black', style = 'dashed']
  NoRecurrence -> Death [label = 'Mortality Rate', color = 'black', fontcolor = 'black', style = 'dashed']
  Intervention -> Death [label = 'Mortality Rate', color = 'black', fontcolor = 'black', style = 'dashed']
}
")
  
  ### 4.2 Calculate cost for treatment / colic episodes as per HES ####
  initial_presentation_only_cost <- hes_data_elective_emergency %>% subset(
    select = c(
      year,
      urs,
      pcnl,
      eswl,
      colic_n,
      emergency_procedures_n
    )
  ) %>% mutate(
    cost_for_initial_presentation = 
      (urs * urs_cost) +
      (pcnl * pcnl_cost) +
      (eswl * eswl_cost * 2) +
      (colic_n * ed_presentation_cost) +
      (emergency_procedures_n * stent_cost)
  )
  
  initial_presentation_only_cost %>% select(year,
                                            cost_for_initial_presentation) %>% drop_na(
                                              cost_for_initial_presentation) %>% gt()
  
  ### 4.3 Estimate Cost for 2020 - XR FU - Full 1% incidence ####
  #### 4.3.1 Simulate populations over years 2016 -> 2020 ####
  pop_2016 <- simulate_population_distribution(400892)
  pop_2017 <- simulate_population_distribution(402715)
  pop_2018 <- simulate_population_distribution(404367)
  pop_2019 <- simulate_population_distribution(406778)
  pop_2020 <- simulate_population_distribution(413791)
  
  #### 4.3.2 Simulate Death rates in above ####
  pop_2016_death_rates <- assign_death_rate_over_time(pop_2016, years = 5, death_rates_ons, base_year = 6)
  pop_2017_death_rates <- assign_death_rate_over_time(pop_2017, years = 4, death_rates_ons, base_year = 7)
  pop_2018_death_rates <- assign_death_rate_over_time(pop_2018, years = 3, death_rates_ons, base_year = 8)
  pop_2019_death_rates <- assign_death_rate_over_time(pop_2019, years = 2, death_rates_ons, base_year = 9)
  pop_2020_death_rates <- assign_death_rate_over_time(pop_2020, years = 1, death_rates_ons, base_year = 10)
  
  overall_death_rates <- rbind(pop_2016_death_rates,
                               pop_2017_death_rates,
                               pop_2018_death_rates,
                               pop_2019_death_rates,
                               pop_2020_death_rates) %>% as_tibble()
  
  overall_death_rates$years_fu <- as.factor(overall_death_rates$years_fu)
  
  rates_death_recurrence1 <- overall_death_rates %>% subset(select = -c(recurrence,
                                                                        recurrence_free_survivors)) %>% mutate(
                                                                          n = survivors,
                                                                          outcome = "Survivors",
                                                                          .keep = "unused"
                                                                        )
  rates_death_recurrence2 <- overall_death_rates %>% subset(select = -c(survivors,
                                                                        recurrence_free_survivors)) %>% mutate(
                                                                          n = recurrence,
                                                                          outcome = "Recurrence",
                                                                          .keep = "unused"
                                                                        )
  rates_death_recurrence3 <- overall_death_rates %>% subset(select = -c(recurrence,
                                                                        survivors)) %>% mutate(
                                                                          n = recurrence_free_survivors,
                                                                          outcome = "Recurrence Free Survivors",
                                                                          .keep = "unused"
                                                                        )
  
  rates_death_recurrence <- rbind(rates_death_recurrence1,
                                  rates_death_recurrence2,
                                  rates_death_recurrence3)
  
  rates_death_recurrence$outcome <- as.factor(rates_death_recurrence$outcome)

  rates_death_recurrence %>%
    group_by(risk_status, year, years_fu, outcome) %>%
    summarise(n = sum(n), .groups = "drop") %>%
    ggplot(aes(y = n, x = year, color = outcome)) + 
    geom_line() +
    facet_grid(years_fu ~ risk_status) +
    labs(title = "Survivors / Recurrences by Year of Follow-up", 
         x = "Year", 
         y = "N",
         color = "Outcome")
  
  #### 4.3.3 Get patients still alive/recurrence free in 2020 ####
  recurrence_free_at_2020 <- rates_death_recurrence3 %>% subset(year == "2020") %>%
  group_by(risk_status, years_fu) %>%
    summarise(n = sum(n), .groups = "drop")
  
  #### 4.8.4 Calculate costs for patients still alive in 2020 - XR only ####
  costs_2020 <- recurrence_free_at_2020 %>% 
    mutate(
      cost_current = case_when(
        years_fu == 1 & risk_status == "low" ~ n * year_1_lr_sf_fu_cost,
        years_fu == 2 & risk_status == "low" ~ n * year_3_5_lr_sf_fu_cost,
        years_fu %in% c(3, 4, 5) & risk_status == "low" ~ n * 0,
        years_fu == 1 & risk_status == "high" ~ n * year_1_hr_sf_fu_cost_current,
        years_fu == 2 & risk_status == "high" ~ n * year_2_lr_sf_fu_cost_current,
        years_fu %in% c(3, 4) & risk_status == "high" ~ n * year_3_onwards_lr_sf_fu_cost_current,
        years_fu == 5 & risk_status == "high" ~ n * 0,
        TRUE ~ 0
      ),
      cost_eau_3 = case_when(
        years_fu == 1 & risk_status == "low" ~ n * year_1_lr_sf_fu_cost,
        years_fu == 2 & risk_status == "low" ~ n * 0,
        years_fu == 3 & risk_status == "low" ~ n * year_3_5_lr_sf_fu_cost,
        years_fu %in% c(4, 5) & risk_status == "low" ~ n * 0,
        years_fu == 1 & risk_status == "high" ~ n * year_1_hr_sf_fu_cost_eau,
        years_fu == 2 & risk_status == "high" ~ n * year_2_lr_sf_fu_cost_eau,
        years_fu %in% c(3, 4, 5) & risk_status == "high" ~ n * year_3_onwards_lr_sf_fu_cost_eau,
        TRUE ~ 0
      ),
      cost_eau_5 = case_when(
        years_fu == 1 & risk_status == "low" ~ n * year_1_lr_sf_fu_cost,
        years_fu == 2 & risk_status == "low" ~ n * 0,
        years_fu %in% c(3, 4, 5) & risk_status == "low" ~ n * year_3_5_lr_sf_fu_cost,
        years_fu == 1 & risk_status == "high" ~ n * year_1_hr_sf_fu_cost_eau,
        years_fu == 2 & risk_status == "high" ~ n * year_2_lr_sf_fu_cost_eau,
        years_fu %in% c(3, 4, 5) & risk_status == "high" ~ n * year_3_onwards_lr_sf_fu_cost_eau,
        TRUE ~ 0
      )
    )
  
  cost_totals <- costs_2020 %>%
    summarise(
      total_cost_current = sum(cost_current, na.rm = TRUE),
      total_cost_eau_3 = sum(cost_eau_3, na.rm = TRUE),
      total_cost_eau_5 = sum(cost_eau_5, na.rm = TRUE)
    )
  
  cost_totals %>% gt()
  
  
  ### 4.4 Estimate Cost for 2020 - XR FU - Only those represented in HES data ####
  #### 4.3.1 Simulate populations over years 2016 -> 2020 ####
  
  hes_patients <- hes_data_elective_emergency %>% subset(select = c(
    year,
    urs_stone_free,
    eswl_stone_free,
    pcnl_stone_free,
    conservative_mx_n
  )) %>% mutate(
    n = urs_stone_free + eswl_stone_free + pcnl_stone_free + (conservative_mx_n * 0.74)
  )  
  
  hes_patients %>% subset(year == c("2016",
                                    "2017",
                                    "2018",
                                    "2019",
                                    "2020")) %>% subset(select = c(year,
                                                                   n)) %>% gt()

  pop_2016_hes <- simulate_population_distribution(51460)
  pop_2017_hes <- simulate_population_distribution(51502)
  pop_2018_hes <- simulate_population_distribution(50721)
  pop_2019_hes <- simulate_population_distribution(52218)
  pop_2020_hes <- simulate_population_distribution(48218)
  
  #### 4.3.2 Simulate Death rates in above ####
  pop_2016_death_rates_hes <- assign_death_rate_over_time(pop_2016_hes, years = 5, death_rates_ons, base_year = 6)
  pop_2017_death_rates_hes <- assign_death_rate_over_time(pop_2017_hes, years = 4, death_rates_ons, base_year = 7)
  pop_2018_death_rates_hes <- assign_death_rate_over_time(pop_2018_hes, years = 3, death_rates_ons, base_year = 8)
  pop_2019_death_rates_hes <- assign_death_rate_over_time(pop_2019_hes, years = 2, death_rates_ons, base_year = 9)
  pop_2020_death_rates_hes <- assign_death_rate_over_time(pop_2020_hes, years = 1, death_rates_ons, base_year = 10)
  
  overall_death_rates_hes <- rbind(pop_2016_death_rates_hes,
                               pop_2017_death_rates_hes,
                               pop_2018_death_rates_hes,
                               pop_2019_death_rates_hes,
                               pop_2020_death_rates_hes) %>% as_tibble()
  
  overall_death_rates_hes$years_fu <- as.factor(overall_death_rates_hes$years_fu)
  
  rates_death_recurrence1_hes <- overall_death_rates_hes %>% subset(select = -c(recurrence,
                                                                        recurrence_free_survivors)) %>% mutate(
                                                                          n = survivors,
                                                                          outcome = "Survivors",
                                                                          .keep = "unused"
                                                                        )
  rates_death_recurrence2_hes <- overall_death_rates_hes %>% subset(select = -c(survivors,
                                                                        recurrence_free_survivors)) %>% mutate(
                                                                          n = recurrence,
                                                                          outcome = "Recurrence",
                                                                          .keep = "unused"
                                                                        )
  rates_death_recurrence3_hes <- overall_death_rates_hes %>% subset(select = -c(recurrence,
                                                                        survivors)) %>% mutate(
                                                                          n = recurrence_free_survivors,
                                                                          outcome = "Recurrence Free Survivors",
                                                                          .keep = "unused"
                                                                        )
  
  rates_death_recurrence_hes <- rbind(rates_death_recurrence1_hes,
                                  rates_death_recurrence2_hes,
                                  rates_death_recurrence3_hes)
  
  rates_death_recurrence_hes$outcome <- as.factor(rates_death_recurrence_hes$outcome)
  
  rates_death_recurrence_hes %>%
    group_by(risk_status, year, years_fu, outcome) %>%
    summarise(n = sum(n), .groups = "drop") %>%
    ggplot(aes(y = n, x = year, color = outcome)) + 
    geom_line() +
    facet_grid(years_fu ~ risk_status) +
    labs(title = "Survivors / Recurrences by Year of Follow-up", 
         x = "Year", 
         y = "N",
         color = "Outcome")
  
  #### 4.3.3 Get patients still alive/recurrence free in 2020 ####
  recurrence_free_at_2020_hes <- rates_death_recurrence3_hes %>% subset(year == "2020") %>%
    group_by(risk_status, years_fu) %>%
    summarise(n = sum(n), .groups = "drop")
  
  #### 4.8.4 Calculate costs for patients still alive in 2020 - XR only ####
  costs_2020_hes <- recurrence_free_at_2020_hes %>% 
    mutate(
      cost_current = case_when(
        years_fu == 1 & risk_status == "low" ~ n * year_1_lr_sf_fu_cost,
        years_fu == 2 & risk_status == "low" ~ n * year_3_5_lr_sf_fu_cost,
        years_fu %in% c(3, 4, 5) & risk_status == "low" ~ n * 0,
        years_fu == 1 & risk_status == "high" ~ n * year_1_hr_sf_fu_cost_current,
        years_fu == 2 & risk_status == "high" ~ n * year_2_lr_sf_fu_cost_current,
        years_fu %in% c(3, 4) & risk_status == "high" ~ n * year_3_onwards_lr_sf_fu_cost_current,
        years_fu == 5 & risk_status == "high" ~ n * 0,
        TRUE ~ 0
      ),
      cost_eau_3 = case_when(
        years_fu == 1 & risk_status == "low" ~ n * year_1_lr_sf_fu_cost,
        years_fu == 2 & risk_status == "low" ~ n * 0,
        years_fu == 3 & risk_status == "low" ~ n * year_3_5_lr_sf_fu_cost,
        years_fu %in% c(4, 5) & risk_status == "low" ~ n * 0,
        years_fu == 1 & risk_status == "high" ~ n * year_1_hr_sf_fu_cost_eau,
        years_fu == 2 & risk_status == "high" ~ n * year_2_lr_sf_fu_cost_eau,
        years_fu %in% c(3, 4, 5) & risk_status == "high" ~ n * year_3_onwards_lr_sf_fu_cost_eau,
        TRUE ~ 0
      ),
      cost_eau_5 = case_when(
        years_fu == 1 & risk_status == "low" ~ n * year_1_lr_sf_fu_cost,
        years_fu == 2 & risk_status == "low" ~ n * 0,
        years_fu %in% c(3, 4, 5) & risk_status == "low" ~ n * year_3_5_lr_sf_fu_cost,
        years_fu == 1 & risk_status == "high" ~ n * year_1_hr_sf_fu_cost_eau,
        years_fu == 2 & risk_status == "high" ~ n * year_2_lr_sf_fu_cost_eau,
        years_fu %in% c(3, 4, 5) & risk_status == "high" ~ n * year_3_onwards_lr_sf_fu_cost_eau,
        TRUE ~ 0
      )
    )
  
  cost_totals_hes <- costs_2020_hes %>%
    summarise(
      total_cost_current = sum(cost_current, na.rm = TRUE),
      total_cost_eau_3 = sum(cost_eau_3, na.rm = TRUE),
      total_cost_eau_5 = sum(cost_eau_5, na.rm = TRUE)
    )
  
  cost_totals_hes %>% gt()
  
